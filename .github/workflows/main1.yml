name: Deploy Docker Container to EC2 Instances

on:
  push:
    branches:
      - main


jobs:
  build-and-deploy:
    environment: prod
    env:
      AWS_REGION: us-east-1
      DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
    outputs:
      client: ${{ steps.client.outputs.client_var }}
      server: ${{ steps.server.outputs.server_var }}
      nginx: ${{ steps.nginx.outputs.nginx_var }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - id: client
        run: |
          client_var=$(git diff --name-only HEAD~1 HEAD | grep 'client' | wc -l)
          echo "client_var=$client_var" >> $GITHUB_OUTPUT

      - id: server
        run: |
          server_var=$(git diff --name-only HEAD~1 HEAD| grep 'server' | wc -l)
          echo "server_var=$server_var" >> $GITHUB_OUTPUT

      - id: nginx
        run: |
          nginx_var=$(git diff --name-only HEAD~1 HEAD | grep 'nginx' | wc -l)
          echo "nginx_var=$nginx_var" >> $GITHUB_OUTPUT

      - name: Build and push client docker image
        if: steps.client.outputs.client_var != '0'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest ./client
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/frontend:latest

      - name: Build and push server docker image
        if: steps.server.outputs.server_var != '0'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/backend:latest ./server
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/backend:latest

      - name: Build and push nginx docker image
        if: steps.nginx.outputs.nginx_var != '0'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/loadbalancer:latest ./nginx
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/loadbalancer:latest

            
  infrastructure:
    needs: build-and-deploy
    environment: prod
    env:
      AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./Terraform
    
    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with: 
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6
   
    - name: Terraform init
      id: init 
      run: terraform init 
   
      
    - name: Terraform validate
      id: validate
      run: terraform validate -no-color
   
   
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve 

    - name: Terraform Apply
      run:  aws s3 cp s3://project-2-mern-app-321/global/mystatefile/terraform.tfstate Terraform/terraform.tfstate



 
